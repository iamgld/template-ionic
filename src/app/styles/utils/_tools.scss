@use './setting' as setting;
@use 'sass:math';

/*
  En esta capa estarán:
    1. herramientas que están disponible globalmente
    2. funciones utilitarias
    3. mixins
*/

/*
  Transforma un valor de pixeles a em.
    @param   {number} $el - el valor en pixeles que se desea convertir.
    @param   {number} $context - el valor en pixeles del contenedor.
    @return  {number} el tamaño transformado en em.
*/
@function em($el, $context: 16px) {
	@if type_of($el) == number and unit($el) == 'px' {
		@return math.div($el, $context) * 1em;
	} @else {
		@error 'Function em() requires a px unit as first argument / La función em() requiere una unidad de pixeles como primer argumento (el segundo es opcional)';
	}
}
/*
  Transforma un valor de pixeles a rem.
  @param   {number} $el - el valor en pixeles que se desea convertir.
  @return  {number} el tamaño transformado en rem.
*/
@function rem($el) {
	@if type_of($el) == number and unit($el) == 'px' {
		@return math.div($el / 16px) * 1rem;
	} @else {
		@error 'Function rem() requires a px unit as argument / La funcion rem() requiere una unidad de pixeles como argumento';
	}
}
// Devuelve true si el breakpoint es parte del core
@function isCoreBreakpoint($bp) {
	@if map-get(setting.$breakPoints, $bp) {
		@return true;
	} @else {
		@return false;
	}
}
// Devuelve true si el breakpoint es válido (em, rem, px)
@function isValidBreakpoint($bp) {
	@if type-of($bp) == number and (unit($bp) == 'px' or unit($bp) == 'em' or unit($bp) == 'rem') {
		@return true;
	} @else {
		@return false;
	}
}
// Obtiene un breakpoint del core
@function getBp($bp) {
	@return map-get(setting.$breakPoints, $bp);
}
// Convierte un valor en em o rem a px
@function toPx($value) {
	@if type-of($value) == number {
		@if unit($value) == 'em' {
			@return math.div($value, 1em) * 16px;
		} @else if unit($value) == 'rem' {
			@return math.div($value, 1rem) * 16px;
		} @else if unit($value) == 'px' {
			@return $value;
		} @else {
			@error "La funcion toPx() solo acepta números en em o rem o px";
		}
	} @else {
		@error "La funcion toPx() solo acepta números en em o rem";
	}
}
// From (mayor que $bp)
@mixin from($from) {
	// Si el bp es del core
	@if isCoreBreakpoint($from) {
		// no imprime media query para el tamaño mas pequeño de los breakpoint
		@if $from == zr {
			@content;
		}
		// imprime media query en los otros tamaños
		@else {
			@media screen and (min-width: getBp($from)) {
				@content;
			}
		}
	}
	// Si el bp es una unidad válida
	@else if isValidBreakpoint($from) {
		@media screen and (min-width: $from) {
			@content;
		}
	}
	// Si no es un breakpoint válido lanzar error
	@else {
		@error 'El mixin from() solo puede recibir un breakpoint del Core (#{map-keys(setting.$breakPoints)}) o un número en px, em o rem';
	}
}
/// To (es menor que $to)
@mixin to($to) {
	// Si es un breakpoint del core
	@if isCoreBreakpoint($to) {
		@if $to == zr {
			@content;
		} @else {
			@media screen and (max-width: (getBp($to) - 1px)) {
				@content;
			}
		}
	}
	// Si es un breakpoint válido (px, em, rem)
	@else if isValidBreakpoint($to) {
		@media screen and (max-width: (toPx($to) - 1px)) {
			@content;
		}
	}
	// Si no es un breakpoint válido lanzar error
	@else {
		@error 'El mixin to() solo puede recibir un breakpoint del Core (#{map-keys(setting.$breakPoints)}) o un número en px, em o rem';
	}
}
// fromTo la regla se ejecuta entre ambos breakpoints.
@mixin fromTo($from, $to) {
	// Si ambos son breakpoints del core
	@if isCoreBreakpoint($from) and isCoreBreakpoint($to) {
		@if getBp($to) > getBp($from) {
			@media screen and (min-width: getBp($from)) and (max-width: (getBp($to) - 1px)) {
				@content;
			}
		} @else {
			@error "El segundo argumento del mixin fromTo debe ser mayor que el primero";
		}
	}
	// Si solo $from es breakpoint del core
	@else if isCoreBreakpoint($from) and not isCoreBreakpoint($to) {
		@if isValidBreakpoint($to) {
			@if toPx($to) > toPx(getBp($from)) {
				@media screen and (min-width: getBp($from)) and (max-width: (toPx($to) - 1px)) {
					@content;
				}
			} @else {
				@error "El segundo argumento del mixin fromTo debe ser mayor que el primero";
			}
		} @else {
			@error "El segundo argumento del mixin fromTo() debe ser un breakpoint del Core (#{map-keys(setting.$breakPoints)}) o un número en px, em o rem";
		}
	}
	// Si solo $to es breakpoint del core
	@else if not isCoreBreakpoint($from) and isCoreBreakpoint($to) {
		@if isValidBreakpoint($from) {
			@if toPx(getBp($to)) > toPx($from) {
				@media screen and (min-width: $from) and (max-width: (getBp($to) - 1px)) {
					@content;
				}
			} @else {
				@error "El segundo argumento del mixin fromTo debe ser mayor que el primero";
			}
		} @else {
			@error "El primer argumento del mixin fromTo() debe ser un breakpoint del Core (#{map-keys(setting.$breakPoints)}) o un número en px, em o rem";
		}
	}
	// Si no son breakpoints del core pero son breakpoints válidos (px, em, rem)
	@else if isValidBreakpoint($from) and isValidBreakpoint($to) {
		@if toPx($to) > toPx($from) {
			@media screen and (min-width: $from) and (max-width: (toPx($to) - 1px)) {
				@content;
			}
		} @else {
			@error "El segundo argumento del mixin fromTo debe ser mayor que el primero";
		}
	}
	// Si al menos hay un breakpoint inválido
	@else {
		@error 'Los argumentos del mixin fromTo() deben ser breakpoints del Core (#{map-keys(setting.$breakPoints)}) o números en px, em o rem';
	}
}

// Extract a color from the color palette
@function colors($color) {
	@return map-get(setting.$colors, $color);
}
// Extract a fontsize from the textsize palette
@function fontsizes($size) {
	@return map-get(setting.$fontsizes, $size);
}
// Extract a spacing value
@function spacing($space) {
	@return map-get(setting.$spacing, $space);
}
// Extract a radius value
@function radius($radio) {
	@return map-get(setting.$radius, $radio);
}
// Extract a Z-Index value
@function zindexs($zindex) {
	@return map-get(setting.$zindexs, $zindex);
}

// Styles of Scroll Bar on Chrome, Edge y Safari.
@mixin scrollbar {
	// Chrome, Edge y Safari.
	&::-webkit-scrollbar {
		width: 8px;
	}
	&::-webkit-scrollbar-track {
		background-color: colors(primary); // color of the tracking area
	}
	&::-webkit-scrollbar-thumb {
		background-color: colors(accent); // color of the scroll thumb
		// border-radius: setting.$Rounded; // roundness of the scroll thumb
		// border: 2px solid Palette(Primary); // creates padding around scroll thumb
	}
	// Firefox
	overflow: auto;
	scrollbar-width: thin;
	// color of the scroll thumb, color of the tracking area
	scrollbar-color: colors(accent) colors(primary);
}

// Define a source size that was used in each breakpoint
@mixin fontsizeHeadingOne() {
	font-family: setting.$roboto;
	font-size: fontsizes(fontsizeHeadingThree);
	@include from(tb) {
		font-size: fontsizes(fontsizeHeadingTwo);
	}
	@include from(dt) {
		font-size: fontsizes(fontsizeHeadingOne);
	}
}
@mixin fontsizeHeadingTwo() {
	font-family: setting.$roboto;
	font-size: fontsizes(fontsizeNormal);
	@include from(tb) {
		font-size: fontsizes(fontsizeHeadingThree);
	}
	@include from(dt) {
		font-size: fontsizes(fontsizeHeadingTwo);
	}
}
@mixin fontsizeHeadingThree() {
	font-family: setting.$roboto;
	font-size: fontsizes(fontsizeNormal);
	@include from(dt) {
		font-size: fontsizes(fontsizeHeadingThree);
	}
}
@mixin fontsizeNormal() {
	font-family: setting.$roboto;
	font-size: fontsizes(fontsizeSmallOne);
	@include from(dt) {
		font-size: fontsizes(fontsizeNormal);
	}
}
@mixin fontsizeSmallOne() {
	font-family: setting.$roboto;
	font-size: fontsizes(fontsizeSmallTwo);
	@include from(dt) {
		font-size: fontsizes(fontsizeSmallOne);
	}
}
@mixin fontsizeSmallTwo() {
	font-family: setting.$roboto;
	font-size: fontsizes(fontsizeSmallTwo);
}
